<%- imports %>

/**
 * Serialized <%= schema.label %>.
 */
<% if (Object.keys(schema.fields).length == 0){ %>
export type <%= schema.name %>Data = MatrixBaseTypeData;
<% } else { %>
export interface <%= schema.name %>Data extends <%= parentName %>Data {
    <% for (const [fieldName, field] of Object.entries(schema.fields)) { %>
    /**
     * <%= field.description %>
     */
    <%= fieldName %><%= !field.required ? '?' : '' %>: <%= sanitizeType(field.type) %>;
    <% } %>
    <% for (const fieldName of Object.keys(schema.fieldValues)) { %>
    /**
     * **This field is static and can not be set.**
     */
    <%= fieldName %>?: never;
    <% } %>
}
<% } %>

/**
 * Matrix Type <%= schema.label %>.
 * 
 * <%- schema.description %>
 */
export class <%= schema.name %> extends <%= parentName %> {
    protected static fields: Record<string, schema.Field> = {
        <% for (const [fieldName, field] of Object.entries(schema.fields || {})) { %>
        <%= fieldName %>: {
            type:         '<%= field.type %>',
            label:        '<%= field.label %>',
            description:  '<%= field.description %>',
            defaultValue: <%- valueToTypescript(field.defaultValue) %>,
            flags:        <%- flagsToArray(field.flags) %>,
            example:      <%- valueToTypescript(field.example) %>,
        },
        <% } %>
    }
    // TODO: check if it makes sense to have this merge with the super
    protected static staticFields: Record<string, unknown> = {
        <% for (const [fieldName, fieldValue] of Object.entries(schema.fieldValues || {})) { %>
        '<%= fieldName %>': <%- valueToTypescript(fieldValue) %>,
        <% } %>
    }
    protected static classInformation = {
        collection:  '<%= collectionName %>',
        name:        '<%= schema.name %>',
        label:       '<%= schema.label %>',
        description: '<%= schema.description %>',
        icon:        '<%= schema.icon %>',
        flags:       <%- flagsToArray(schema.flags) %>,
    }

    /**
     * Constructor for the <%= schema.label %>.
     * @param {<%= schema.name %>Data} data Serialized data.
     */
    constructor(data: <%= schema.name %>Data) {
        super(data);
    }
    <% for (const method of methods) { %>
    /**
     * <%= method.description %>
<%- generateJSDoc(method) %>
     */
    <%= method.access && method.access != 'public' ? `${method.access} ` : '' %><%= method.isStatic ? 'static ' : '' %><%= method.isAsync ? 'async ' : '' %><%= method.name %><%- method.generic ? `<${method.generic}>` : '' %>(<%= generateMethodSignature(method) %>): <%- method.isAsync ? `Promise<${method.returns.type}>` : method.returns.type %> {
        <%- method.code %>
    }
    <% } %>
}